#cloud-config

hostname: HostName

# include one or more SSH public keys
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCxX2im4hTlGi2+oUaqzmguRmXOoHqFofvSILYegBHu2cmu3cHMFyQX9mBa2qVJ/+d6F/lfJ1XX4OYxPwtEe4YHgzsUzvUgZod3x2hoim2uOGaf0BoRdTAnQxY6Tum9fylI+MzMmDLFR1d2G3AzGyDPc9baZJWVCElNLbeq47sXITiVl5j52u+WHPRnEy/PMIX5amLPWTBYPds7qF8zlUJaM6r9xedFyyv2t5J/6Zn755f0S9rEVw5ga8H71qj4d9MgaHF5DjLS46ml5lL7vmNpk2wdIL54ncZ5a/I4JcFsnhycrBIXVoaq+aubstyByG6S8qa4OqSPOIaHvfaIK9fNcffVoTzjGNyZo5yy2qEemSPQ0emSp0CiuGra7E4cPnbhFdfEJHXOz7+TJ5CwY0QvR6wEOr0t5PxzHZsI4aoKvrrEeoeua9guZmRU41SujCvi4sDSXRVfxyq6yLhk9kVS4/zbXIsANN9p9CkeXUsZiAqUv6d+rRXY2kuh0S5aM9a1GoRHbfYxeNIXeko3hkJnl9CFtd2qnio0L+vLF55wvuvYgoxmW/YtNfIsI8DO43+Ydez7SIGfauuErBqPhAUYL2U5S4i8p/Oqnzuxm755R5/yXO3Wxko27LC09YhnZGk8AswsIv3rdgYiNscDQMZorya5WH4lnJjkJnmmOh44mw== jaohaohsuan@gmail.com
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCmUIsevaUMci2lwlj4TYbnH/jS28VBmeJT5KxpT4ku9AZFVnNEfX1C0ZdNF7wW1V1k+Cj3Vzc4KZeBja5imsY/ynmkxsDmrhO5Fga6AtWqottz9HbQNvesjfLfx5/QoGaRycH2r5BZhbCTuRGpiKXKvAh9EmyFFdxb2di+6J4QbwGruF3zWTTijcq70Ip+Dsdfottq2hkNIFIzdgxFm0eXVMOnFEek5AEiCYKYF9VQHjT0NGFqaT4LQPXE3q3Ibox8FgG2T72DlK3YZaxLEKsy2QMpgEFu877cj/oFwLi8V3megOfEjKItuI7UrCml2jmXEBwc9ufEJvy9rfGH4x8wyji90omPAUqMJKfSCJ5H7v0PfwQnM7xxw50kTA741qC5GACZ+PAKsrjC0K6VZ5tAQGtkEvqa5FFUX8w/Q5Yg+RzNdY9o55SOuKf8K2FyUR4qJy/PNATPUnqvW0mocluW+PXBFdwnleHl6pDUObrYsXkQKJ1sHw74tWJHPsgpL7ffZjpRt8KBRKKMaBp2P01+xXhk1Ar86blgyXzMlrw+ia+VlnGkRNeYfV9l3NHYh+rEic6A8T/6XqAgbjtrQyCKjRMwATDUk4rFctpVQP7zURHzPo9Y+/z+RQzHQKDBqcj3BjbQZAwuP+9viqZ+vzXb724UIC1X6eBan7xlNJMDBw== jaohaohsuan@gmail.com

write_files:
  - path: /opt/bin/bootkube-start
    owner: root
    permissions: "0644"
    content: |
      #!/bin/bash
      # Wrapper for bootkube start
      set -e
      BOOTKUBE_ACI="${BOOTKUBE_ACI:-quay.io/coreos/bootkube}"
      BOOTKUBE_VERSION="${BOOTKUBE_VERSION:-v0.3.1}"
      BOOTKUBE_ASSETS="${BOOTKUBE_ASSETS:-/srv/assets}"
      exec docker run --rm -v /srv/assets:/assets --network=host ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} /bootkube start --asset-dir=/assets --etcd-server=http://127.0.0.1:2379 "$@"
  - path: /etc/kubelet-docker
    owner: root
    permissions: "0644"
    content: |
      DOCKER_RUN_OPTS="--net=host \
                   --pid=host \
                   --ipc=host \
                   --name=kubelet \
                   --privileged \
                   -v /run:/run \
                   -v /var/run:/var/run \
                   -v /var/lib/docker:/var/lib/docker \
                   -v /var/lib/kubelet:/var/lib/kubelet:shared \
                   -v /dev:/host/dev \
                   -v /etc/kubernetes:/etc/kubernetes \
                   -v /etc/cni:/etc/cni \
                   -v /opt/cni:/opt/cni \
                   gcr.io/google_containers/hyperkube-amd64:vK8SVersion"
      KUBELET_ARGS="--network-plugin=cni \
                    --pod-manifest-path=/etc/kubernetes/manifests \
                    --lock-file=/var/run/lock/kubelet.lock \
                    --exit-on-lock-contention \
                    --cluster-dns=10.3.0.10 \
                    --cluster-domain=cluster.local \
                    --kubeconfig=/etc/kubernetes/kubeconfig \
                    --node-labels=master=true \
                    --require-kubeconfig \
                    --allow-privileged"

  - path: /etc/profile.d/bash_completion.sh
    content: |
      if [ -e "/var/bash-completion/bash_completion" ]; then
          . /var/bash-completion/bash_completion
          . <(kubectl completion bash)
      fi

  - path: /etc/environment
    content: |
      PRIVATEIP=ServerIPAddress

coreos:
  etcd2:
    name: etcdserver
    initial-cluster: etcdserver=http://ServerIPAddress:2380
    initial-advertise-peer-urls: http://ServerIPAddress:2380
    advertise-client-urls: http://ServerIPAddress:2379
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://0.0.0.0:2380

  units:
    - name: systemd-networkd.service
      command: stop
    - name: 00-eth0.network
      runtime: true
      content: |
        [Match]
        Name=eth0

        [Network]
        Address=ServerIPAddress/24
        Gateway=RouterIP
        DNS=8.8.8.8

    - name: down-interfaces.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/ip link set eth0 down
        ExecStart=/usr/bin/ip addr flush dev eth0
    - name: systemd-networkd.service
      command: restart

    - name: coreos-installd.service
      command: start
      content: |
        [Unit]
        Description=coreos-installd
        Requires=network-online.target
        After=network-online.target
        ConditionPathExists=!/.check_coreos-installd.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c 'wget -O - http://iPXE_Server_IP/bin/coreos-installd.sh | bash -'

        [Install]
        WantedBy=multi-user.target

    # set timezone Asia/Taipei
    - name: timezone.service
      command: start
      content: |
        [Unit]
        Description=timezone

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime

        [Install]
        WantedBy=multi-user.target

    - name: etcd2.service
      command: start

    - name: rkt-metadata.socket
      command: start

    - name: rkt-metadata.service
      command: start

    - name: rkt-api.service
      command: start
      content: |
        [Unit]
        Description=rkt api service
        Documentation=http://github.com/coreos/rkt
        After=network.target

        [Service]
        ExecStart=/usr/bin/rkt api-service --listen=0.0.0.0:15441

        [Install]
        WantedBy=multi-user.target

    - name: docker.service
      drop-ins:
        - name: "shared-mount-flags.conf"
          content: |
            [Service]
            MountFlags=shared
      command: "restart"

    - name: kubelet.path
      enable: true
      content: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      content: |
        [Service]
        EnvironmentFile=/etc/kubelet-docker
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /srv/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=-/usr/bin/docker rm kubelet
        ExecStart=/usr/bin/docker run --rm $DOCKER_RUN_OPTS /kubelet $KUBELET_ARGS
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

    - name: bootkube.service
      content: |
        [Unit]
        Description=Bootstrap a Kubernetes control plane with a temp api-server
        [Service]
        Type=simple
        ExecStart=/opt/bin/bootkube-start

    - name: hosts.service
      command: start
      content: |
        [Unit]
        Description=Hosts Manager
        After=etcd2.service

        [Service]
        EnvironmentFile=/etc/environment
        Restart=always
        ExecStartPre=-/usr/bin/etcdctl mkdir /hosts
        ExecStartPost=/usr/bin/etcdctl set /hosts/%H $PRIVATEIP
        ExecStart=/usr/bin/bash -c 'while true; do \
            echo "127.0.0.1 localhost" > /etc/hosts; \
            for i in $(etcdctl ls /hosts); do \
                echo $(etcdctl get $i) $(echo $i | cut -c 8-); \
            done >> /etc/hosts; \
            sleep 5;\
          done'
        ExecStopPost=/usr/bin/etcdctl rm /hosts/%H

        [Install]
        WantedBy=multi-user.target

users:
  - name: andrew
    passwd: $1$cxDrcmk0$B/WI7rG8E4THMzpkyPe.q.
    groups:
      - sudo
      - docker
  - name: henry
    passwd: $1$Y36ZEmVp$bEqFWn.Sbp6Y.mzmAT32P/
    groups:
      - sudo
      - docker
  - name: inu
    passwd: "$6$rounds=4096$yTXdzXEJJzKRX74$Nxo6drS5qdJVpV5C.RqVE2ufRwqq./62xrKRXws4tWI0KM1jMPjt.DbESTdDdzHMYIbbkMeGUQa6j4Ow0Rar7."
    groups:
      - sudo
      - docker
