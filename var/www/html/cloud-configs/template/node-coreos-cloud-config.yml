#cloud-config

hostname: HostName

# include one or more SSH public keys
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC7DVGV5Agh45zZFJHjpUWjRgB1u5JuypitHOScLgm6i/tPiLjslbVOma5M0XMt9b5xz+STtRwlqH2vax+vYpwTIExSrlJmNKez/6KJJ9Xim6DEbkLX7FWYj4nr5/YNhAH6SLILtFdvbSVE6PAT92gYvDPtSEs57SdUK/W4Y+XWQXV7RtAcSEahKEvo5/eqFMtYnQNlOIu7gaKZSgjMfHTl8aokwRmACsG/OnOSvfXwGJcNoId1H78e9X4S6QeOz92h3D3VRrPCtiJSnceZ0xMJe/R1m3z7uhVJQTGQH/WUSHPNKRwDEehvCP13bBQ6ok+s3pk1VYFeIGABxIo0evStRSfKBXa98lUleyfpFYaPUmyhw6STgeKp+dA58NzJySS3mJQlde8x1MtQmRsomqI9vio9KxsYGMJmO0W77I7MX8enob1x6OP9dJySvOnY7fF62UR9CeTQFrxBS/tL10Xr4O3/3zYdX3mmdYI7ZhDPuEqH19aqadNkDFDFJzRa1rwfXBsSZkxgCdhP55ARnEeHYFEy5oyxxBcFfNB56zfw53cdcCGQA9oqmZEoAto/m54I7bPgAUebJHzcWDNrOjOhdeG9dpMVaaOphuFlXIx0lkvoOWu6Tr/PTnhQe8JCR3xQ6y6UiIQ1iA2gNPvJsy/p0BSlweKvS8Csdb0ZUe1qJw== jaohaohsuan@gmail.com

write_files:
  - path: /srv/kubeadm/node.yaml
    owner: root
    permissions: "0644"
    content: |
      apiVersion: kubeadm.k8s.io/v1alpha1
      kind: NodeConfiguration
      masterAddresses:
      - MasterIPAddress
      secrets:
        givenToken: KubernetesToken 
  - path: /etc/kubelet-rkt
    owner: root
    permissions: "0644"
    content: |
      RKT_RUN_ARGS="--volume etc-cni-netd,kind=host,source=/etc/cni/net.d,readOnly=false --volume opt-cni-bin,kind=host,source=/opt/cni/bin,readOnly=false --mount volume=etc-cni-netd,target=/etc/cni/net.d --mount volume=opt-cni-bin,target=/opt/cni/bin"
      KUBELET_ARGS="--network-plugin=cni --cluster-dns=10.96.0.10 --cluster-domain=cluster.local --kubeconfig=/etc/kubernetes/kubelet.conf --require-kubeconfig=true --allow-privileged=true --node-labels='storagenode=glusterfs' --hostname-override=ServerIPAddress"

  - path: /etc/kubelet-docker
    owner: root
    permissions: "0644"
    content: |
      DOCKER_RUN_ARGS="--privileged \
        --pid=host \
        --net=host \
        -v /var/run:/var/run \
        -v /var/lib/kubelet/:/var/lib/kubelet:shared \
        -v /var/lib/docker:/var/lib/docker \
        -v /etc/kubernetes:/etc/kubernetes \
        -v /opt/cni:/opt/cni \
        -v /etc/cni:/etc/cni \
        -e TERM=xterm \
        gcr.io/google_containers/hyperkube-amd64:vK8SVersion"
      KUBELET_ARGS="--network-plugin=cni --pod-manifest-path=/etc/kubernetes/manifests --cluster-dns=10.96.0.10 --cluster-domain=cluster.local --kubeconfig=/etc/kubernetes/kubelet.conf --require-kubeconfig=true --allow-privileged=true --node-labels='storagenode=glusterfs' --hostname-override=ServerIPAddress"

  - path: /etc/profile.d/bash_completion.sh
    content: |
      if [ -e "/var/bash-completion/bash_completion" ]; then
          . /var/bash-completion/bash_completion
          . <(kubectl completion bash)
      fi

  - path: /etc/profile.d/vim.sh
    content: |
      PATH=/opt/vim/bin:$PATH
      export VIMRUNTIME=/opt/vim/share

  - path: /etc/environment
    content: |
      PRIVATEIP=ServerIPAddress

  - path: /opt/bin/speed
    owner: root
    permissions: "0755"
    content: |
      #!/bin/bash
      iface=$1
      RXB=$(</sys/class/net/"$iface"/statistics/rx_bytes)
      TXB=$(</sys/class/net/"$iface"/statistics/tx_bytes)
      sleep 2
      RXBN=$(</sys/class/net/"$iface"/statistics/rx_bytes)
      TXBN=$(</sys/class/net/"$iface"/statistics/tx_bytes)
      RXDIF=$(echo $((RXBN - RXB)) )
      TXDIF=$(echo $((TXBN - TXB)) )
      echo -e "$((RXDIF / 1024 / 2))K/s $((TXDIF / 1024 / 2))K/s"

  - path: /root/.tmux.conf
    owner: root
    permissions: "0644"
    content: |
      set -g prefix C-a
      bind C-a send-prefix

      bind r source-file ~/.tmux.conf \; display "Reloaded!"

      set -s escape-time 1

      set -g base-index 1
      set -g pane-base-index 1

      set -g default-terminal "screen-256color"
      set -g status-fg colour243
      set -g status-bg colour233
      set -g window-status-fg colour110
      set -g window-status-bg default
      set -g window-status-attr dim

      set -g window-status-current-fg colour110
      set -g window-status-current-bg colour234

      set -g status-left-length 20
      set -g status-left '#[fg=colour243,bg=colour235] Session #S '
      set -g status-right "#[fg=colour136,bg=colour233] net #(speed eth0) #[fg=colour241,bg=colour234] #(/usr/bin/ip route get 8.8.8.8 | awk 'NR==1{print $(NF)}') #[fg=colour244,bg=colour236] %H:%M:%S "
      set -g status-justify left

      # window status
      setw -g window-status-format "#[fg=colour240]#[bg=colour235] #I #[bg=colour233]#[fg=colour240] #W "
      setw -g window-status-current-format "#[bg=colour220]#[fg=colour239] #I-#P #[fg=colour179]#[bg=colour234] #W "

      bind h select-pane -L
      bind j select-pane -D
      bind k select-pane -U
      bind l select-pane -R

      bind -r H resize-pane -L 5
      bind -r J resize-pane -D 5
      bind -r K resize-pane -U 5
      bind -r L resize-pane -R 5

      set-option -g -q mouse on
      setw -g mode-keys vi

      # Setup 'v' to begin selection as in Vim
      bind-key -t vi-copy v begin-selection

      # Update default binding of `Enter` to also use copy-pipe
      unbind -t vi-copy Enter

  - path: /opt/bin/kubectl
    owner: root
    permissions: "0755"
    content: |
      #!/usr/bin/bash -e
      if [ ! -f /opt/bin/hyperkube ]; then
      containerid=`docker ps | grep kubelet | grep -v pause | awk '{print $1}'`
        docker cp "$containerid":/hyperkube /opt/bin/
      fi
      exec /opt/bin/hyperkube kubectl "$@"

coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://localhost:2379
    initial-cluster: etcdserver=http://MasterIPAddress:2380
  units:
    - name: etcd2.service
      command: start
    - name: systemd-networkd.service
      command: stop
    - name: 00-eth0.network
      runtime: true
      content: |
        [Match]
        Name=eth0

        [Network]
        Address=ServerIPAddress/24
        Gateway=RouterIP
        DNS=RouterIP

    - name: down-interfaces.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/ip link set eth0 down
        ExecStart=/usr/bin/ip addr flush dev eth0
    - name: systemd-networkd.service
      command: restart

    - name: coreos-installd.service
      command: start
      content: |
        [Unit]
        Description=coreos-installd
        Requires=network-online.target
        After=network-online.target
        ConditionPathExists=!/.check_coreos-installd.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c 'wget -O - http://iPXE_Server_IP/bin/coreos-installd.sh | bash -ex'

        [Install]
        WantedBy=multi-user.target

    # set timezone Asia/Taipei
    - name: timezone.service
      command: start
      content: |
        [Unit]
        Description=timezone

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime

        [Install]
        WantedBy=multi-user.target

    - name: rkt-metadata.socket
      command: start

    - name: rkt-metadata.service
      command: start

    - name: rkt-api.service
      command: start
      content: |
        [Unit]
        Description=rkt api service
        Documentation=http://github.com/coreos/rkt
        After=network.target

        [Service]
        ExecStart=/usr/bin/rkt api-service --listen=0.0.0.0:15441

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=coreos-installd.service
        After=coreos-installd.service

        [Service]
        EnvironmentFile=/etc/kubelet-docker
        Environment=KUBELET_IMAGE_TAG=vK8SVersion_coreos.0
        ExecStartPre=-/usr/bin/docker rm -f kubelet 
        #ExecStart=/usr/lib/coreos/kubelet-wrapper $KUBELET_ARGS
        ExecStart=/usr/bin/docker run --name=kubelet --rm $DOCKER_RUN_ARGS ./hyperkube kubelet $KUBELET_ARGS

        KillMode=mixed
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: join-k8s.service
      command: start
      content: |
        [Unit]
        Description=node join k8s
        ConditionPathExists=!/etc/kubernetes/kubelet.conf

        [Service]
        Environment=KUBE_HYPERKUBE_IMAGE=gcr.io/google_containers/hyperkube-amd64:vK8SVersion
        ExecStartPre=/usr/bin/ls /.check_coreos-installd.service
        RemainAfterExit=yes
        ExecStart=/opt/bin/kubeadm join --token=KubernetesToken MasterIPAddress --skip-preflight-checks
        ExecStartPost=/usr/bin/bash -c "sleep 10 && mkdir /root/.kube && cp /etc/kubernetes/kubelet.conf /root/.kube/config"
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

    - name: hosts.service
      command: start
      content: |
        [Unit]
        Description=Hosts Manager
        After=etcd2.service

        [Service]
        EnvironmentFile=/etc/environment
        Restart=always
        ExecStartPre=-/usr/bin/etcdctl mkdir /hosts
        ExecStartPost=/usr/bin/etcdctl set /hosts/%H $PRIVATEIP
        ExecStart=/usr/bin/bash -c 'while true; do \
            echo "127.0.0.1 localhost" > /etc/hosts; \
            for i in $(etcdctl ls /hosts); do \
                echo $(etcdctl get $i) $(echo $i | cut -c 8-); \
            done >> /etc/hosts; \
            sleep 5;\
          done'
        ExecStopPost=/usr/bin/etcdctl rm /hosts/%H

        [Install]
        WantedBy=multi-user.target

users:
  - name: andrew
    passwd: $1$cxDrcmk0$B/WI7rG8E4THMzpkyPe.q.
    groups:
      - sudo
      - docker
  - name: inu
    passwd: "$6$rounds=4096$yTXdzXEJJzKRX74$Nxo6drS5qdJVpV5C.RqVE2ufRwqq./62xrKRXws4tWI0KM1jMPjt.DbESTdDdzHMYIbbkMeGUQa6j4Ow0Rar7."
    groups:
      - sudo
      - docker
